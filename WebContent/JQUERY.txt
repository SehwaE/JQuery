JQUERY.txt

JQuery?
  => 자바스크립트를 조금 더 쉽게 사용하기 위해서 기능으로 만들어진 언어(프레임워크)
  
  => Ajax,JSON,XML....
  => 자바스크립트 함수의 집합.
  
  jquery 다운로드
  
   압축버전 / 비압축버전 상관없이 사용가능
   
  CDN -> 네트워크가 가능한 어떤 곳에서 바로 받아서 사용가능(다른이름으로 저장)

  https://code.jquery.com/
 
  https://developers.google.com/speed/libraries#jquery
 
  https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview#jQuery_Releases_on_the_CDN_0
 
  https://cdnjs.com/libraries/jquery
 
  https://www.jsdelivr.com/package/npm/jquery
 
 
  (BuildPath -> tomcat 추가) 
  (configure -> jquery 파일2개 apply)
  (js폴더에 홈페이지에서 다운받은 파일 추가하기)
 
  * 상대경로, 절대경로
  
  절대경로 : 파일, 웹페이지가 가지고 있는 고유한 경로
  
  - 자체 주소정보를 알고 있다면, 바로 이동해서 실행(사용) 가능
  - 시작지점에 '/'(root)를 사용
  - JSP(model2)
   => 가상주소 : ~.me 프로젝트 폴더(프로젝트명) - root
   => 실제주소 : ~.jsp WebContent(를 기준으로 움직임) - root폴더
  
  상대경로 : 파일이 위치한 폴더를 기준으로 시작지점을 설정하는 경로
  
  /   : 파일이 있는 폴더의 최상위경로
  ./  : (파일이 있는) 현재 폴더 경로
  ../ : 상위 폴더로 (한번)이동

  * Ajax(Asynchronous JavaScript and XML)
	=> 비 동기방식의 javaScript, xml
	
	=> 서버의 데이터는 사용가능하지만, 페이지는 동기화 X
	=> 서버의 HW성능이 높아지면서 사용하게 됨, 다양한 기기의 활성화
	=> 페이지 이동없이 처리됨(사용자가 안보이는 뒷편에서 이동)(사용자가 화면이 바뀌는것을 볼 수 없기 때문에 페이지가 이동하지 않는다고 느낌)
	=> 항상 페이지를 갔다가 옴  => Ajax 많이 사용 => 성능저하
	
	
   * 서버 동기화 방식
	* 클라이언트 -> 요청(naver.com) -> 웹서버(WEB) -> WAS -> DB
			 <-		  응답		   <-			<-	   <-
	
	=> 동기화방식 : 해당 동작을 실행할 떄 마다 페이지 리로딩(페이지 깜빡)

   * 서버 비동기 방식
	* 클라이언트 -> 요청(naver.com) -> 웹서버 -> WAS -> DB
			 <-     응답		   <-
	
	=> 비동기화 방식 : 동작을 실행할 때 페이지 이동O, 페이지 깜빡X
  
  
  
  
  * Ajax 사용
  
	$.ajax(주소,옵션); 
	$.ajax({
		url:"이동할 페이지",
	  	type:"전송방식(get/post)",
	  	data:"전송할 데이터"
	  	dataType:"요청한 데이터타입(html,xml,json,text)",
	  	success:function(result){
	  		전송 성공시 실행할 코드
	  		result : 요청한 데이터
	  	},
	  	error:function(){
	  		전송 실패시 실행할 코드
	  	},
	  	complete:function(){
	  		ajax 완료되면 실행하는 함수
	  });
  
  
  * Ajax응답 데이터 타입
  
	1) HTML
		웹페이지를 보여주는 문서.
		- 태그로 데이터가 전달되기 때문에 바로 페이지에 추가 가능
		- 서버가 리턴시 반드시 사용가능한 html 페이지를 리턴해야만 함.
		- 웹 브라우저가 아닌곳에서는 사용이 어렵다. (데이터 이식성이 낮다  <-> 데이터 이식성이 높다: 모바일 앱, pc 등등 다양한곳에서 확인가능)
		- 요청이 동일한 도메인으로부터 처리해야함.
			=> 페이지:itwillbs.co.kr(서비스), ajax 요청:itwillbs.co.kr (o)
			=> 페이지:itwillbs.co.kr(서비스), ajax 요청:naver.com      (x)
	2) XML
		태그의 형태로 데이터를 저장. html에 비해 문법이 제한적.
		- 다양한 데이터, 복잡한 구조도 표현가능
		- 다양한 곳에서 활용가능
		- 데이터이외의 태그정보가 많기 때문에 불필요한 데이터소모가 많음
		- 요청이 동일한 도메인으로부터 처리해야함.	
	3) JSON - gson
  		JavaScript Object Notation - 자바스크립트 객체 표현식	
  		- 거의 모든 도메인에서  요청을 처리가능하다.
  		- HTML/XML 보다 훨씬 간결함.(속성:값)
  		- 문법에 예민함(따옴표,콤마,점...)
  		- 데이터안에 나쁜 목적의 데이터를 심을 수 있음.(.json파일 다운받을때 주의)
  
  
  JSON : 자바스크립트 객체 표현법 
  	=> 다양한 프로그램에 사용가능한 표준 데이터 포맷
  MIME 타입 : application/json
    파일확장자 : .json
  
    xml포맷을 사용한 데이터 처리 => json포맷을 사용한 데이터 처리
    
    * 단순 텍스트 형태의 표기(직관적)
    * 속성 : 값 (쌍), csv(표준데이터포맷)보다 훨씬 적은 용량사용
    * 규칙만 잘 사용한다면 시스템에 상관없이 사용가능
    * 웹브라우저에는 기본적으로 json 파서를 포함하고 있음
	
	
	* JSON 문법
	속성(key):값(value) 형태의 데이터
	  -> 속성은 "속성", 값은 데이터타입에 따라 변경
	{ } : 객체
	[ ] : 배열
	
	* 자료형
	  정수 : 1000, 0, -10 (2진수,8진수 등등 진수는 사용불가)
  	  실수 : 1.223, -9653.11 (고정소수점)
  	  실수 : 1e4, 2.5E-3 (부동 소수점)
	  논리형 : true, false
	 NULL : null
	  문자열 : "데이터" - 최소 0개 이상의 유니코드로 작성
	 	  "1234","ITWILL","홍길동","hello \n ITWILL"
  	  배열 : 타입 상관없이 모든데이터를 한번에 저장가능
  	  	[10,20,"itwill",{"name":"홍길동","age":30,},true] ({}안에는 객체의 속성 저장가능)
  	  	{"tel":"010-1234-1234","arr":[10,20,30,"it"]}([]안에 배열저장가능 but 형태가 맞아야)
  
  
  
  
  
  
  
  
  
  